function wrap_out_vector3(funcInfo)
	local obj = UnityEngine.Vector3.New(0,0,0)
	table.insert(funcInfo.v3_list, obj)
	return obj
end

function get_unity_color_red(funcInfo)
	local obj = UnityEngine.Color.red
	table.insert(funcInfo.c_list , obj)
	return obj
end

function wrap_vector3(funcInfo, v)
	local obj = UnityEngine.Vector3.New(v.x,v.y,v.z)
	table.insert(funcInfo.v3_list, obj)
	return obj
end

function get_unity_color_black(funcInfo)
	local obj = UnityEngine.Color.black
	table.insert(funcInfo.c_list , obj)
	return obj
end

function get_vector3_zero(funcInfo)
	local obj = UnityEngine.Vector3.New(0,0,0)
	table.insert(funcInfo.v3_list, obj)
	return obj
end

function wrap_vector2(funcInfo, v)
	local obj = UnityEngine.Vector2.New(v.x,v.y)
	table.insert(funcInfo.v2_list, obj)
	return obj
end

function new_vector3(funcInfo, initializer, ...)
	local x,y,z = ...
	local obj = UnityEngine.Vector3.New(x,y,z)
	table.insert(funcInfo.v3_list, obj)
	if obj and initializer then
	    initializer(obj)
	end
	return obj
end

function get_unity_color_white(funcInfo)
	local obj = UnityEngine.Color.white
	table.insert(funcInfo.c_list , obj)
	return obj
end

function remove_from_func_info_color(funcInfo, class, val)
	if val~=nil then
	    local result = luatableremove(funcInfo.c_list, val)
	end
end

function recycle_and_keep_color32(funcInfo, fieldType, oldVal, newVal)
	recycleandkeepcheck(funcInfo, fieldType, oldVal, newVal)
	if not rawequal(oldVal,newVal) and oldVal~=nil then
	    Color32Pool.Recycle(oldVal)
	end
	if newVal~=nil then
	    luatableremove(funcInfo.c32_list, newVal)
	end
end

function wrap_color(funcInfo, v)
	local obj = UnityEngine.Color.New(v.r,v.g,v.b,v.a)
	table.insert(funcInfo.c_list, obj)
	return obj
end

