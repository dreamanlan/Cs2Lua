require "cs2lua__namespaces"; 

ZipOutputStream = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(ZipOutputStream, nil, nil, nil, ...);
		return __cs2dsl_newobj;
	end,

	get_Instance = function()
		local __method_ret_117_4_120_5;
		__method_ret_117_4_120_5 = ZipOutputStream.s_Instance;
		return __method_ret_117_4_120_5;
	end,

	cctor = function()
		ZipOutputStream.__cctor();
	end,

	__cctor = function()
		if ZipOutputStream.__cctor_called then 
			return;
		else
			ZipOutputStream.__cctor_called = true;
		end;
		ZipOutputStream.s_Instance = newobject(ZipOutputStream, nil, nil, nil);
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	Test = function(this)
		local dict;
		dict = newexterndictionary(System.Collections.Generic.Dictionary_TKey_TValue, buildglobalinfoonce("typeargs_TypeArgs", getglobalinfo("typeargs_TypeArgs") or {TypeKind.Struct, TypeKind.Struct}), nil, {});
		dict:Add(1, 1);
		dict:Add(2, 2);
		setexterninstanceindexer(System.Collections.Generic.Dictionary_TKey_TValue, {System.Int32, System.Int32}, {TypeKind.Struct, TypeKind.Struct}, dict, System.Collections.Generic.Dictionary_TKey_TValue, "set_Item", 2, true, 1, (getexterninstanceindexer(System.Collections.Generic.Dictionary_TKey_TValue, {System.Int32, System.Int32}, {TypeKind.Struct, TypeKind.Struct}, dict, System.Collections.Generic.Dictionary_TKey_TValue, "get_Item", 1, 1) + getexterninstanceindexer(System.Collections.Generic.Dictionary_TKey_TValue, {System.Int32, System.Int32}, {TypeKind.Struct, TypeKind.Struct}, dict, System.Collections.Generic.Dictionary_TKey_TValue, "get_Item", 1, 2)));
	end,

	ctor = function(this)
		ZipOutputStream.__ctor(this);
		return this;
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "V", 0);
		rawset(this, "m_I", 1);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("ZipOutputStream::__define_class begin");

		local class = ZipOutputStream;
		local obj_methods = {
			__self__Test = rawget(class, "__self__Test");
			Test = rawget(class, "Test"),
			__self__ctor = rawget(class, "__self__ctor");
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;
		tmp_obj_method = rawget(class, "Test");
		rawset(class, "__self__Test", tmp_obj_method);
		tmp_obj_method = rawget(class, "ctor");
		rawset(class, "__self__ctor", tmp_obj_method);

		local __defineclass_return = defineclass(nil, "ZipOutputStream", "ZipOutputStream", class, obj_methods, false, false);
		Utility.Warn("ZipOutputStream::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		s_Instance = true,
		__cctor_called = true,
	},

	__obj_fields = {
		V = true,
		m_I = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};

ZipOutputStream.EmbedClass = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(ZipOutputStream.EmbedClass, nil, nil, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		ZipOutputStream.EmbedClass.__cctor();
	end,

	__cctor = function()
		if ZipOutputStream.EmbedClass.__cctor_called then 
			return;
		else
			ZipOutputStream.EmbedClass.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	Test = function(this)
		ZipOutputStream.Test(ZipOutputStream.get_Instance());
	end,

	ctor = function(this)
		ZipOutputStream.EmbedClass.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("ZipOutputStream.EmbedClass::__define_class begin");

		local class = ZipOutputStream.EmbedClass;
		local obj_methods = {
			__self__Test = rawget(class, "__self__Test");
			Test = rawget(class, "Test"),
			__self__ctor = rawget(class, "__self__ctor");
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;
		tmp_obj_method = rawget(class, "Test");
		rawset(class, "__self__Test", tmp_obj_method);
		tmp_obj_method = rawget(class, "ctor");
		rawset(class, "__self__ctor", tmp_obj_method);

		local __defineclass_return = defineclass(nil, "ZipOutputStream.EmbedClass", "EmbedClass", class, obj_methods, false, false);
		Utility.Warn("ZipOutputStream.EmbedClass::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(ZipOutputStream.EmbedClass);
settempmetatable(ZipOutputStream);
