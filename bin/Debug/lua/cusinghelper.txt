require "cs2lua__namespaces"; 

CUsingHelper = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(CUsingHelper, nil, nil, nil, ...);
		return __cs2dsl_newobj;
	end,

	Test = function(i)
		local __method_ret_132_4_135_5;
		__method_ret_132_4_135_5 = nil;
		return __method_ret_132_4_135_5;
	end,

	ReadZip = function(bytes)
		local __method_ret_137_4_194_5;
		local abc;
		abc = newarraydim2(System.Int32, TypeKind.Struct, 0, 12, 13);
		local v;
		v = 0;
		local dict;
		dict = newexterndictionary(System.Collections.Generic.Dictionary_TKey_TValue, buildglobalinfoonce("typeargs_TypeArgs", getglobalinfo("typeargs_TypeArgs") or {TypeKind.Struct, TypeKind.Struct}), nil, {});
		--
		v = (v + 1);
		if (v > 0) then

		else
			--
			local __invoke_146_16_146_42;
			__invoke_146_16_146_42,v = dict:TryGetValue(1, __cs2lua_out);
			if (__invoke_146_16_146_42 and (v == 0)) then

			else
				--
				local __unary_148_21_148_24 = v; v = (v + 1);
				if (__unary_148_21_148_24 > 0) then

				else
					--
					v = (v - 1);
					if (v > 0) then

					else
					end;
				end;
			end;
		end;
				--        if(dict.TryGetValue(1, out v) && v==0) {
		--        }
		--        while (dict.TryGetValue(1, out v) && v == 0) {
		--        }
		--        do {
		--        } while (dict.TryGetValue(1, out v) && v == 0);
		--        
		--        int v1 = ++v + 2;
		--        int v2 = v++ + 2;
		--        if(++v > 0) {
		--        }
		--        if(v++ > 0) {
		--        }
		--        while(++v > 0) {
		--        }
		--        while (v-- > 0) {
		--        }
		--        do {
		--        } while (++v > 0);
		--        do {
		--        } while (v-- > 0);
		--        

				--        ZipInputStream zipInput = new ZipInputStream(new MemoryStream(bytes));
		--		MemoryStream zipMemory = new MemoryStream();
		--		ZipOutputStream ZipStream = new ZipOutputStream(zipMemory);
		--		try
		--		{
		--			return Test(123);
		--		}
		--		catch (Exception)
		--		{
		--			return null;
		--			throw;
		--		}
		--        

		return nil;
	end,

	cctor = function()
		CUsingHelper.__cctor();
	end,

	__cctor = function()
		if CUsingHelper.__cctor_called then 
			return;
		else
			CUsingHelper.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__attributes = CUsingHelper__Attrs,
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	ctor = function(this, a1, a2)
		CUsingHelper.__ctor(this);
		return this;
	end,

	Dispose = function(this)
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "__attributes", CUsingHelper__Attrs);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("CUsingHelper::__define_class begin");

		local class = CUsingHelper;
		local obj_methods = {
			__self__ctor = rawget(class, "__self__ctor");
			ctor = rawget(class, "ctor"),
			__self__Dispose = rawget(class, "__self__Dispose");
			Dispose = rawget(class, "Dispose"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;
		tmp_obj_method = rawget(class, "ctor");
		rawset(class, "__self__ctor", tmp_obj_method);
		tmp_obj_method = rawget(class, "Dispose");
		rawset(class, "__self__Dispose", tmp_obj_method);

		local __defineclass_return = defineclass(nil, "CUsingHelper", "CUsingHelper", class, obj_methods, false, false);
		Utility.Warn("CUsingHelper::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__attributes = true,
		__cctor_called = true,
	},

	__obj_fields = {
		__attributes = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"System.IDisposable",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__attributes";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(CUsingHelper);
