require "cs2lua__namespaces"; 

DataBlockDefine.StringStringMap = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(DataBlockDefine.StringStringMap, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		DataBlockDefine.StringStringMap.__cctor();
	end,

	__cctor = function()
		if DataBlockDefine.StringStringMap.__cctor_called then 
			return;
		else
			DataBlockDefine.StringStringMap.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	GetDataBlockId = function(this)
		local __method_ret_2019_8_2022_9;
		__method_ret_2019_8_2022_9 = this.m_DataBlockId;
		return __method_ret_2019_8_2022_9;
	end,

	Init = function(this)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = DclApi.alloc_container(5);
		this.m_DataWrap:Clear();
		this.m_IsValid = true;
	end,

	Release = function(this)
		if (not this.m_IsValid) then 
			return;
		end;
		DataBlockDefine.StringStringMap.Clear(this);
		DclApi.free_container(this.m_DataBlockId);
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	Attach = function(this, dataBlockId)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = dataBlockId;
		if (dataBlockId ~= 0) then 
			DclApi.iterate_string_uint64_map(dataBlockId, function(k, v)
				local __cs2lua_func_info = luainitialize();
				local __method_ret_2046_62_2053_17;
				local key;
				key = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
				DataBlockDefine.CString.Attach(key, k);
				local val;
				val = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
				DataBlockDefine.CString.Attach(val, v);
				this.m_DataWrap:Add(k, newstruct(DataBlockDefine.StringStringMap.KeyValue, nil, nil, "ctor", 0, function(newobj)
					newobj.Key = key;
					newobj.Value = val;
				end));
				__method_ret_2046_62_2053_17 = true;
				__cs2lua_func_info = luafinalize(__cs2lua_func_info);
				return __method_ret_2046_62_2053_17;
			end);
		end;
		this.m_IsValid = true;
	end,

	Detach = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringStringMap.__ori_Detach, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Detach = function(this, __cs2lua_func_info)
		if (not this.m_IsValid) then 
			return;
		end;
		local __foreach_2061_12_2067_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_2061_12_2067_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			local kv;
			kv = getexterninstancestructmember(SymbolKind.Property, pair, System.Collections.Generic.KeyValuePair_TKey_TValue, "Value");
			DataBlockDefine.CString.Detach(kv.Key);
			if (not isequal(nil, kv.Value)) then 
				DataBlockDefine.CString.Detach(kv.Value);
			end;
		end;
		recycleiterator(__cs2lua_func_info, __foreach_2061_12_2067_13);
		this.m_DataWrap:Clear();
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	GetCount = function(this)
		local __method_ret_2073_8_2076_9;
		__method_ret_2073_8_2076_9 = this.m_DataWrap.Count;
		return __method_ret_2073_8_2076_9;
	end,

	GetData = function(this, key)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(DataBlockDefine.StringStringMap.__ori_GetData, this, __cs2lua_func_info, key);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = nil;
		end;
		return __retval_1;
	end,
	__ori_GetData = function(this, __cs2lua_func_info, key)
		local __method_ret_2077_8_2087_9;
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			local k;
			k = DclApi.string_uint64_map_get_key(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
			local kv;
			--
			local __invoke_2082_20_2082_53;
			__invoke_2082_20_2082_53,kv = this.m_DataWrap:TryGetValue(k, __cs2lua_out);
			kv = wrapstruct(kv, DataBlockDefine.StringStringMap.KeyValue);
			if __invoke_2082_20_2082_53 then

				__method_ret_2077_8_2087_9 = kv.Value;
				return __method_ret_2077_8_2087_9;
			end;
		end;
		__method_ret_2077_8_2087_9 = nil;
		return __method_ret_2077_8_2087_9;
	end,

	SetData = function(this, key, val)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringStringMap.__ori_SetData, this, __cs2lua_func_info, key, val);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_SetData = function(this, __cs2lua_func_info, key, val)
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			local oldKey;
			oldKey = DclApi.string_uint64_map_get_key(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
			local mapKey;
			mapKey = DclApi.string_uint64_map_set_element(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key), DataBlockDefine.StringStringMap.condexp_2092_105_2092_143(this, val));
			if (oldKey ~= mapKey) then 
				local kv;
				--
				local __invoke_2095_24_2095_62;
				__invoke_2095_24_2095_62,kv = this.m_DataWrap:TryGetValue(oldKey, __cs2lua_out);
				kv = wrapstruct(kv, DataBlockDefine.StringStringMap.KeyValue);
				if __invoke_2095_24_2095_62 then

					DataBlockDefine.CString.Release(kv.Key);
					if (not isequal(nil, kv.Value)) then 
						DataBlockDefine.CString.Release(kv.Value);
					end;
				end;
			end;
			if (mapKey ~= DataBlockDefine.CString.GetDataBlockId(key)) then 
				local newKV;
				newKV = newstruct(DataBlockDefine.StringStringMap.KeyValue, nil, nil, "ctor", 0, nil);
				newKV.Key = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
				DataBlockDefine.CString.Attach(newKV.Key, mapKey);
				newKV.Value = val;
				setinstanceindexerstruct(true, DataBlockDefine.StringStringMap.KeyValue, System.Collections.Generic.Dictionary_TKey_TValue, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, "set_Item", 2, mapKey, newKV);
			else
				setinstanceindexerstruct(true, DataBlockDefine.StringStringMap.KeyValue, System.Collections.Generic.Dictionary_TKey_TValue, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, "set_Item", 2, mapKey, newstruct(DataBlockDefine.StringStringMap.KeyValue, nil, nil, "ctor", 0, function(newobj)
					newobj.Key = key;
					newobj.Value = val;
				end));
			end;
		end;
	end,
	condexp_2092_105_2092_143 = function(this, val)
		local retval_2092_105_2092_143 = nil;
		if isequal(nil, val) then retval_2092_105_2092_143 = 0 else retval_2092_105_2092_143 = DataBlockDefine.CString.GetDataBlockId(val) end;
		return retval_2092_105_2092_143;
	end,

	Add = function(this, key, val)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringStringMap.__ori_Add, this, __cs2lua_func_info, key, val);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Add = function(this, __cs2lua_func_info, key, val)
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			local mapKey;
			mapKey = DclApi.string_uint64_map_add_element(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key), DataBlockDefine.StringStringMap.condexp_2117_105_2117_143(this, val));
			local newKV;
			newKV = newstruct(DataBlockDefine.StringStringMap.KeyValue, nil, nil, "ctor", 0, nil);
			newKV.Key = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
			DataBlockDefine.CString.Attach(newKV.Key, mapKey);
			newKV.Value = val;
			this.m_DataWrap:Add(mapKey, wrapstructargument(newKV, DataBlockDefine.StringStringMap.KeyValue, OperationKind.LocalReference, SymbolKind.Local));
		end;
	end,
	condexp_2117_105_2117_143 = function(this, val)
		local retval_2117_105_2117_143 = nil;
		if isequal(nil, val) then retval_2117_105_2117_143 = 0 else retval_2117_105_2117_143 = DataBlockDefine.CString.GetDataBlockId(val) end;
		return retval_2117_105_2117_143;
	end,

	Remove = function(this, key)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringStringMap.__ori_Remove, this, __cs2lua_func_info, key);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Remove = function(this, __cs2lua_func_info, key)
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			local mapKey;
			mapKey = DclApi.string_uint64_map_get_key(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
			local kv;
			--
			local __invoke_2130_20_2130_58;
			__invoke_2130_20_2130_58,kv = this.m_DataWrap:TryGetValue(mapKey, __cs2lua_out);
			kv = wrapstruct(kv, DataBlockDefine.StringStringMap.KeyValue);
			if __invoke_2130_20_2130_58 then

				DataBlockDefine.CString.Release(kv.Key);
				if (not isequal(nil, kv.Value)) then 
					DataBlockDefine.CString.Release(kv.Value);
				end;
			end;
			DclApi.string_uint64_map_remove_element(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
		end;
	end,

	Contains = function(this, key)
		local __method_ret_2139_8_2145_9;
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			__method_ret_2139_8_2145_9 = DclApi.string_int64_map_contains(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
			return __method_ret_2139_8_2145_9;
		end;
		__method_ret_2139_8_2145_9 = false;
		return __method_ret_2139_8_2145_9;
	end,

	Clear = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringStringMap.__ori_Clear, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Clear = function(this, __cs2lua_func_info)
		local __foreach_2148_12_2154_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_2148_12_2154_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			local kv;
			kv = getexterninstancestructmember(SymbolKind.Property, pair, System.Collections.Generic.KeyValuePair_TKey_TValue, "Value");
			DataBlockDefine.CString.Release(kv.Key);
			if (not isequal(nil, kv.Value)) then 
				DataBlockDefine.CString.Release(kv.Value);
			end;
		end;
		recycleiterator(__cs2lua_func_info, __foreach_2148_12_2154_13);
		this.m_DataWrap:Clear();
		DclApi.container_clear(this.m_DataBlockId);
	end,

	Iterate = function(this, callback)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringStringMap.__ori_Iterate, this, __cs2lua_func_info, callback);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Iterate = function(this, __cs2lua_func_info, callback)
		local __foreach_2160_12_2164_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_2160_12_2164_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			local kv;
			kv = getexterninstancestructmember(SymbolKind.Property, pair, System.Collections.Generic.KeyValuePair_TKey_TValue, "Value");
			if (not callback(kv.Key, kv.Value)) then 
				do
					break;
				end;
			end;
		end;
		recycleiterator(__cs2lua_func_info, __foreach_2160_12_2164_13);
	end,

	ctor = function(this)
		DataBlockDefine.StringStringMap.__ctor(this);
	end,

	__ctor = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringStringMap.__ori___ctor, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori___ctor = function(this, __cs2lua_func_info)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
		this.m_DataWrap = newexterndictionary(System.Collections.Generic.Dictionary_TKey_TValue, buildglobalinfoonce("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_StringStringMap_KeyValue_TypeArgs", getglobalinfo("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_StringStringMap_KeyValue_TypeArgs") or {System.UInt64, DataBlockDefine.StringStringMap.KeyValue}), buildglobalinfoonce("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_StringStringMap_KeyValue_TypeKinds", getglobalinfo("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_StringStringMap_KeyValue_TypeKinds") or {TypeKind.Structure, TypeKind.Structure}), "ctor", 0, {});
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_IsValid", false);
		rawset(this, "m_DataBlockId", 0);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("DataBlockDefine.StringStringMap::__define_class begin");

		local class = DataBlockDefine.StringStringMap;
		local obj_methods = {
			GetDataBlockId = rawget(class, "GetDataBlockId"),
			Init = rawget(class, "Init"),
			Release = rawget(class, "Release"),
			Attach = rawget(class, "Attach"),
			Detach = rawget(class, "Detach"),
			GetCount = rawget(class, "GetCount"),
			GetData = rawget(class, "GetData"),
			SetData = rawget(class, "SetData"),
			Add = rawget(class, "Add"),
			Remove = rawget(class, "Remove"),
			Contains = rawget(class, "Contains"),
			Clear = rawget(class, "Clear"),
			Iterate = rawget(class, "Iterate"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "DataBlockDefine.StringStringMap", "StringStringMap", class, obj_methods, false, false);
		Utility.Warn("DataBlockDefine.StringStringMap::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		m_IsValid = true,
		m_DataBlockId = true,
		m_DataWrap = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"DataBlockDefine.IDataBlock",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};

DataBlockDefine.StringStringMap.KeyValue = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2lua_func_info = luainitialize();
		local __retval_0, __retval_1 = luapcall(DataBlockDefine.StringStringMap.KeyValue.__ori___new_object, __cs2lua_func_info, ...);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
		if not __retval_0 then
			lualog("{0}", __retval_1);
			__retval_1 = nil;
		end;
		return __retval_1;
	end,
	__ori___new_object = function(__cs2lua_func_info, ...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newstruct(DataBlockDefine.StringStringMap.KeyValue, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		DataBlockDefine.StringStringMap.KeyValue.__cctor();
	end,

	__cctor = function()
		if DataBlockDefine.StringStringMap.KeyValue.__cctor_called then 
			return;
		else
			DataBlockDefine.StringStringMap.KeyValue.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	ctor = function(this)
		DataBlockDefine.StringStringMap.KeyValue.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("DataBlockDefine.StringStringMap.KeyValue::__define_class begin");

		local class = DataBlockDefine.StringStringMap.KeyValue;
		local obj_methods = {
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};

		local __defineclass_return = defineclass(nil, "DataBlockDefine.StringStringMap.KeyValue", "KeyValue", class, obj_methods, true, false);
		Utility.Warn("DataBlockDefine.StringStringMap.KeyValue::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		Key = true,
		Value = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__is_sealed_class = true,
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "datablockdefine__cstring";
settempmetatable(DataBlockDefine.StringStringMap.KeyValue);
settempmetatable(DataBlockDefine.StringStringMap);
