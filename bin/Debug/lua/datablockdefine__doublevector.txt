require "cs2lua__namespaces"; 

DataBlockDefine.DoubleVector = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(DataBlockDefine.DoubleVector, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		DataBlockDefine.DoubleVector.__cctor();
	end,

	__cctor = function()
		if DataBlockDefine.DoubleVector.__cctor_called then 
			return;
		else
			DataBlockDefine.DoubleVector.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	GetDataBlockId = function(this)
		local __method_ret_1042_8_1045_9;
		__method_ret_1042_8_1045_9 = this.m_DataBlockId;
		return __method_ret_1042_8_1045_9;
	end,

	Init = function(this)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = DclApi.alloc_container(3);
		this.m_IsValid = true;
	end,

	Release = function(this)
		if (not this.m_IsValid) then 
			return;
		end;
		DclApi.free_container(this.m_DataBlockId);
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	Attach = function(this, dataBlockId)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = dataBlockId;
		this.m_IsValid = true;
	end,

	Detach = function(this)
		if (not this.m_IsValid) then 
			return;
		end;
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	Reserve = function(this, space)
		DclApi.container_reserve_space(this.m_DataBlockId, typecast(space, System.UInt64, TypeKind.Struct));
	end,

	GetCount = function(this)
		local __method_ret_1080_8_1083_9;
		__method_ret_1080_8_1083_9 = typecast(DclApi.container_get_size(this.m_DataBlockId), System.Int32, TypeKind.Struct);
		return __method_ret_1080_8_1083_9;
	end,

	GetData = function(this, index)
		local __method_ret_1084_8_1090_9;
		if ((index >= 0) and (index < DataBlockDefine.DoubleVector.GetCount(this))) then 
			__method_ret_1084_8_1090_9 = DclApi.double_vector_get_element(this.m_DataBlockId, typecast(index, System.UInt64, TypeKind.Struct));
			return __method_ret_1084_8_1090_9;
		end;
		__method_ret_1084_8_1090_9 = 0;
		return __method_ret_1084_8_1090_9;
	end,

	SetData = function(this, index, data)
		if ((index >= 0) and (index < DataBlockDefine.DoubleVector.GetCount(this))) then 
			DclApi.double_vector_set_element(this.m_DataBlockId, typecast(index, System.UInt64, TypeKind.Struct), data);
		end;
	end,

	IndexOf = function(this, data)
		local __method_ret_1097_8_1100_9;
		__method_ret_1097_8_1100_9 = typecast(DclApi.double_vector_index_of_element(this.m_DataBlockId, data), System.Int32, TypeKind.Struct);
		return __method_ret_1097_8_1100_9;
	end,

	GetLast = function(this)
		local __method_ret_1101_8_1104_9;
		__method_ret_1101_8_1104_9 = DataBlockDefine.DoubleVector.GetData(this, (DataBlockDefine.DoubleVector.GetCount(this) - 1));
		return __method_ret_1101_8_1104_9;
	end,

	AddLast = function(this, data)
		DclApi.double_vector_push_back(this.m_DataBlockId, data);
	end,

	RemoveLast = function(this)
		DclApi.double_vector_pop_back(this.m_DataBlockId);
	end,

	Remove = function(this, data)
		local index;
		index = DataBlockDefine.DoubleVector.IndexOf(this, data);
		DataBlockDefine.DoubleVector.RemoveAt(this, index);
	end,

	RemoveAt = function(this, index)
		if ((index >= 0) and (index < DataBlockDefine.DoubleVector.GetCount(this))) then 
			DclApi.double_vector_erase(this.m_DataBlockId, typecast(index, System.UInt64, TypeKind.Struct));
		end;
	end,

	Clear = function(this)
		DclApi.container_clear(this.m_DataBlockId);
	end,

	ctor = function(this)
		DataBlockDefine.DoubleVector.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_IsValid", false);
		rawset(this, "m_DataBlockId", 0);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("DataBlockDefine.DoubleVector::__define_class begin");

		local class = DataBlockDefine.DoubleVector;
		local obj_methods = {
			GetDataBlockId = rawget(class, "GetDataBlockId"),
			Init = rawget(class, "Init"),
			Release = rawget(class, "Release"),
			Attach = rawget(class, "Attach"),
			Detach = rawget(class, "Detach"),
			Reserve = rawget(class, "Reserve"),
			GetCount = rawget(class, "GetCount"),
			GetData = rawget(class, "GetData"),
			SetData = rawget(class, "SetData"),
			IndexOf = rawget(class, "IndexOf"),
			GetLast = rawget(class, "GetLast"),
			AddLast = rawget(class, "AddLast"),
			RemoveLast = rawget(class, "RemoveLast"),
			Remove = rawget(class, "Remove"),
			RemoveAt = rawget(class, "RemoveAt"),
			Clear = rawget(class, "Clear"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "DataBlockDefine.DoubleVector", "DoubleVector", class, obj_methods, false, false);
		Utility.Warn("DataBlockDefine.DoubleVector::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		m_IsValid = true,
		m_DataBlockId = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"DataBlockDefine.IDataBlock",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(DataBlockDefine.DoubleVector);
