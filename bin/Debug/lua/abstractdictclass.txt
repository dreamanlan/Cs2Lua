require "cs2lua__namespaces"; 

AbstractDictClass = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(AbstractDictClass, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		AbstractDictClass.__cctor();
	end,

	__cctor = function()
		if AbstractDictClass.__cctor_called then 
			return;
		else
			AbstractDictClass.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	Add = function(this, val)
		AbstractDictClass.AddImpl(this, val);
	end,

	ctor = function(this)
		AbstractDictClass.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("AbstractDictClass::__define_class begin");

		local class = AbstractDictClass;
		local obj_methods = {
			Add = rawget(class, "Add"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		rawset(class, "AddImpl", wrapabstract("AddImpl", AbstractDictClass));
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "AbstractDictClass", "AbstractDictClass", class, obj_methods, false, false);
		Utility.Warn("AbstractDictClass::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"IDict",
	},
	__is_abstract_class = true,
	__method_info = {
		AddImpl = {
			abstract = true,
		},
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(AbstractDictClass);
