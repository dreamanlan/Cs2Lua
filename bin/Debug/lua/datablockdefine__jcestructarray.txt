require "cs2lua__namespaces"; 

DataBlockDefine.JceStructArray = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(DataBlockDefine.JceStructArray, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		DataBlockDefine.JceStructArray.__cctor();
	end,

	__cctor = function()
		if DataBlockDefine.JceStructArray.__cctor_called then 
			return;
		else
			DataBlockDefine.JceStructArray.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	GetDataBlockId = function(this)
		local __method_ret_2554_8_2557_9;
		__method_ret_2554_8_2557_9 = this.m_DataBlockId;
		return __method_ret_2554_8_2557_9;
	end,

	Init = function(this)
		if this.m_IsValid then 
			return;
		end;
		this.m_IsValid = true;
	end,

	Release = function(this)
		if (not this.m_IsValid) then 
			return;
		end;
		local __foreach_exp_2568_12_2570_13 = this.m_DataWrap;
		for __foreach_ix_2568_12_2570_13 = 1, __foreach_exp_2568_12_2570_13.Count do
			local obj = __foreach_exp_2568_12_2570_13[__foreach_ix_2568_12_2570_13];
			callinterface(obj, DataBlockDefine.IDataBlock, "Release");
		end;
		this.m_DataWrap:Clear();
		if (this.m_DataBlockId ~= 0) then 
			DataBlockDefine.DclApi.free_array(this.m_DataBlockId);
			this.m_DataBlockId = 0;
		end;
		this.m_IsValid = false;
	end,

	Attach = function(this, dataBlockId)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = dataBlockId;
		if (dataBlockId ~= 0) then 
			local len;
			len = DataBlockDefine.DclApi.get_array_length(dataBlockId);
			this.m_DataWrap.Capacity = len;
			local ix;
			ix = 0;
			while (ix < len) do
				local objId;
				objId = DataBlockDefine.DclApi.get_array_element_uint64(dataBlockId, typecast(ix, System.UInt32, TypeKind.Struct));
				local obj;
				obj = this.OnNewDataBlock();
				callinterface(obj, DataBlockDefine.IDataBlock, "Attach", objId);
				this.m_DataWrap:Add(obj);
				ix = (ix + 1);
			end;
		end;
		this.m_IsValid = true;
	end,

	Detach = function(this)
		if (not this.m_IsValid) then 
			return;
		end;
		local __foreach_exp_2599_12_2601_13 = this.m_DataWrap;
		for __foreach_ix_2599_12_2601_13 = 1, __foreach_exp_2599_12_2601_13.Count do
			local obj = __foreach_exp_2599_12_2601_13[__foreach_ix_2599_12_2601_13];
			callinterface(obj, DataBlockDefine.IDataBlock, "Detach");
		end;
		this.m_DataWrap:Clear();
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	GetLength = function(this)
		local __method_ret_2606_8_2614_9;
		if (this.m_DataBlockId ~= 0) then 
			__method_ret_2606_8_2614_9 = DataBlockDefine.DclApi.get_array_length(this.m_DataBlockId);
			return __method_ret_2606_8_2614_9;
		else
			__method_ret_2606_8_2614_9 = 0;
			return __method_ret_2606_8_2614_9;
		end;
		return nil;
	end,

	Reset = function(this, size)
		if (this.m_DataBlockId ~= 0) then 
			local __foreach_exp_2619_16_2621_17 = this.m_DataWrap;
			for __foreach_ix_2619_16_2621_17 = 1, __foreach_exp_2619_16_2621_17.Count do
				local obj = __foreach_exp_2619_16_2621_17[__foreach_ix_2619_16_2621_17];
				callinterface(obj, DataBlockDefine.IDataBlock, "Release");
			end;
			this.m_DataWrap:Clear();
			DataBlockDefine.DclApi.free_array(this.m_DataBlockId);
		end;
		this.m_DataBlockId = DataBlockDefine.DclApi.alloc_array(8, size, size);
		this.m_DataWrap.Capacity = typecast(size, System.Int32, TypeKind.Struct);
		local ix;
		ix = 0;
		while (ix < size) do
			local obj;
			obj = this.OnNewDataBlock();
			this.m_DataWrap:Add(obj);
			ix = (ix + 1);
		end;
	end,

	GetData = function(this, T, index)
		local __method_ret_2632_8_2640_9;
		if ((index >= 0) and (index < this.m_DataWrap.Count)) then 
			__method_ret_2632_8_2640_9 = typecast(this.m_DataWrap[index + 1], T, TypeKind.TypeParameter);
			return __method_ret_2632_8_2640_9;
		else
			__method_ret_2632_8_2640_9 = nil;
			return __method_ret_2632_8_2640_9;
		end;
		return nil;
	end,

	SetData = function(this, index, val)
		if (this.m_DataBlockId ~= 0) then 
			if ((index >= 0) and (index < this.m_DataWrap.Count)) then 
				this.m_DataWrap[index + 1] = val;
			end;
			DataBlockDefine.DclApi.set_array_element_uint64(this.m_DataBlockId, typecast(index, System.UInt32, TypeKind.Struct), callinterface(val, DataBlockDefine.IDataBlock, "GetDataBlockId"));
		end;
	end,

	ctor = function(this)
		DataBlockDefine.JceStructArray.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
		this.m_DataWrap = newexternlist(System.Collections.Generic.List_T, buildglobalinfoonce("g_System_Collections_Generic_List_DataBlockDefine_IDataBlock_TypeArgs", getglobalinfo("g_System_Collections_Generic_List_DataBlockDefine_IDataBlock_TypeArgs") or {DataBlockDefine.IDataBlock}), buildglobalinfoonce("g_System_Collections_Generic_List_DataBlockDefine_IDataBlock_TypeKinds", getglobalinfo("g_System_Collections_Generic_List_DataBlockDefine_IDataBlock_TypeKinds") or {TypeKind.Interface}), "ctor", 0, {});
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_IsValid", false);
		rawset(this, "m_DataBlockId", 0);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("DataBlockDefine.JceStructArray::__define_class begin");

		local class = DataBlockDefine.JceStructArray;
		local obj_methods = {
			GetDataBlockId = rawget(class, "GetDataBlockId"),
			Init = rawget(class, "Init"),
			Release = rawget(class, "Release"),
			Attach = rawget(class, "Attach"),
			Detach = rawget(class, "Detach"),
			GetLength = rawget(class, "GetLength"),
			Reset = rawget(class, "Reset"),
			GetData = rawget(class, "GetData"),
			SetData = rawget(class, "SetData"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "DataBlockDefine.JceStructArray", "JceStructArray", class, obj_methods, false, false);
		Utility.Warn("DataBlockDefine.JceStructArray::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		OnNewDataBlock = true,
		m_IsValid = true,
		m_DataBlockId = true,
		m_DataWrap = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"DataBlockDefine.IDataBlock",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(DataBlockDefine.JceStructArray);
