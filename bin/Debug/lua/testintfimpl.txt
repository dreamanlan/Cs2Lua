require "cs2lua__namespaces"; 

TestIntfImpl = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(TestIntfImpl, nil, nil, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		TestIntfImpl.__cctor();
	end,

	__cctor = function()
		if TestIntfImpl.__cctor_called then 
			return;
		else
			TestIntfImpl.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	get_prop = function(this)
		local __method_ret_25_4_25_33;
		__method_ret_25_4_25_33 = this.prop;
		return __method_ret_25_4_25_33;
	end,

	set_prop = function(this, value)
		this.prop = value;
	end,

	ctor = function(this)
		TestIntfImpl.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "prop", 0);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("TestIntfImpl::__define_class begin");

		local class = TestIntfImpl;
		local obj_methods = {
			get_prop = rawget(class, "get_prop"),
			set_prop = rawget(class, "set_prop"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "TestIntfImpl", "TestIntfImpl", class, obj_methods, false, false);
		Utility.Warn("TestIntfImpl::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		prop = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"ITestIntf",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
settempmetatable(TestIntfImpl);
