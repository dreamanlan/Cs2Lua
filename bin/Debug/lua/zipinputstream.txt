require "cs2lua__namespaces"; 

ZipInputStream = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(ZipInputStream, nil, nil, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		ZipInputStream.__cctor();
	end,

	__cctor = function()
		if ZipInputStream.__cctor_called then 
			return;
		else
			ZipInputStream.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("ZipInputStream::__define_class begin");

		local class = ZipInputStream;

		local raw_obj_methods = {
			ctor = function(this, ms)
				local __cs2lua_func_info = luainitialize();
				luapcall(this.__ori_ctor, this, __cs2lua_func_info, ms);
				__cs2lua_func_info = luafinalize(__cs2lua_func_info);
			end,
			__ori_ctor = function(this, __cs2lua_func_info, ms)
				this:__ctor();
				local os;
				(= os);
				local os2;
				os2 = typeas(objecttolua(this:Test(luatoobject(SymbolKind.Method, false, "ZipInputStream:Test", os), luatoobject(SymbolKind.Method, false, "ZipInputStream:Test", os), luatoobject(SymbolKind.Method, false, "ZipInputStream:Test", os))), ZipOutputStream, TypeKind.Class);
				local intList;
				intList = newlist(IntList, nil, nil, {});
				local a;
				a = newexternlist(System.Collections.Generic.List_T, buildglobalinfoonce("typeargs_TypeArgs", getglobalinfo("typeargs_TypeArgs") or {TypeKind.Struct}), nil, {});
				local aa;
				aa = newexterndictionary(System.Collections.Generic.Dictionary_TKey_TValue, buildglobalinfoonce("typeargs_TypeArgs", getglobalinfo("typeargs_TypeArgs") or {TypeKind.Class, TypeKind.Class}), nil, {});
				TestExtension.Test(intList, UnityEngine.ParticleSystem, nil);
				intList:AddRange(a);
				local gobj;
				gobj = nil;
				local r;
				r = UnityEngine.Object.Instantiate__Object__Object(gobj);
				local b;
				b = this:Test2(124, newexternlist(System.Collections.Generic.List_T, buildglobalinfoonce("typeargs_TypeArgs", getglobalinfo("typeargs_TypeArgs") or {TypeKind.Struct}), nil, {}));
				local o;
				o = luatoobject(SymbolKind.Local, false, "o", wraparray({1, 2}, nil, System.Int32, TypeKind.Struct));
				local arr;
				arr = typeas(objecttolua(o), System.Array, TypeKind.Array);
				local aa;
				aa = "123";
				local bb;
				bb = "456";
				local da;
				da = 1;
				local db;
				db = 2;
				local r;
				r = isequal(aa, bb);
				r = (da == db);
				local ca;
				ca = get_unity_color_white(__cs2lua_func_info);
				local cb;
				cb = get_unity_color_black(__cs2lua_func_info);
				r = invokeexternoperator(System.Boolean, UnityEngine.Color, "op_Equality", ca, cb);
				local va;
				local vb;
				va,vb = this:Test3(__cs2lua_out, __cs2lua_out);
				va = wrap_vector3(__cs2lua_func_info, va);
				vb = wrap_vector3(__cs2lua_func_info, vb);
				return this;
			end,

			Test = function(this, o, ...)
				local __cs2lua_func_info = luainitialize();
				local __retval_0, __retval_1 = luapcall(this.__ori_Test, this, __cs2lua_func_info, o, ...);
				__cs2lua_func_info = luafinalize(__cs2lua_func_info);
				if not __retval_0 then
					lualog("{0}", __retval_1);
					__retval_1 = nil;
				end;
				return __retval_1;
			end,
			__ori_Test = function(this, __cs2lua_func_info, o, ...)
				local __method_ret_62_4_66_5;
				local args;
				args = wrapparams({...}, System.Object, TypeKind.Class);
				local v3;
				v3 = new_vector3(__cs2lua_func_info, 2, 3);
				__method_ret_62_4_66_5 = nil;
				return __method_ret_62_4_66_5;
			end,

			Test2 = function(this, v, enumer)
				local __method_ret_67_4_79_5;
				local __try_ret_69_8_77_9, __try_retval_69_8_77_9;
				__try_ret_69_8_77_9,__try_retval_69_8_77_9 = luatry(nil);
			repeat
				do
					__method_ret_67_4_79_5 = (a + b);
					__try_retval_69_8_77_9 = 1;
					break;
				end;
			until true;
				if __try_ret_69_8_77_9 then 
					UnityEngine.Debug.Log__Void__Object(luastrtocsstr("finally"));
					if __try_retval_69_8_77_9 then 
						if (__try_retval_69_8_77_9 == 1) then 
							return __method_ret_67_4_79_5;
						end;
					end;
				end;
				local __catch_handled_69_8_77_9, __catch_retval_69_8_77_9;
				__catch_handled_69_8_77_9 = false;
				__catch_retval_69_8_77_9 = luacatch(__catch_handled_69_8_77_9, __try_retval_69_8_77_9, (not __try_ret_69_8_77_9) and function(e)
					__catch_handled_69_8_77_9 = true;
					UnityEngine.Debug.LogFormat__Void__String__A_Object(luastrtocsstr("{0}\n{1}"), e.Message, e.StackTrace);
				end);
				if (not __try_ret_69_8_77_9) then 
					UnityEngine.Debug.Log__Void__Object(luastrtocsstr("finally"));
				end;
				__method_ret_67_4_79_5 = nil;
				return __method_ret_67_4_79_5;
			end,

			Test3 = function(this, v1, v2)
				local __cs2lua_func_info = luainitialize();
				local __retval_0, __retval_1, __retval_2 = luapcall(this.__ori_Test3, this, __cs2lua_func_info, v1, v2);
				__cs2lua_func_info = luafinalize(__cs2lua_func_info);
				if not __retval_0 then
					lualog("{0}", __retval_1);
					__retval_1 = nil;
				end;
				return __retval_1, __retval_2;
			end,
			__ori_Test3 = function(this, __cs2lua_func_info, v1, v2)
				v1 = wrap_out_vector3(__cs2lua_func_info);
				v2 = wrap_out_vector3(__cs2lua_func_info);
				v1 = get_vector3_zero(__cs2lua_func_info);
				v2 = get_vector3_zero(__cs2lua_func_info);
				return v1, v2;
			end,

			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};
		local obj_methods = {
			ctor = raw_obj_methods.ctor,
			__self__ctor = raw_obj_methods.ctor,
			__ori_ctor = raw_obj_methods.__ori_ctor,
			Test = raw_obj_methods.Test,
			__ori_Test = raw_obj_methods.__ori_Test,
			Test2 = raw_obj_methods.Test2,
			Test3 = raw_obj_methods.Test3,
			__ori_Test3 = raw_obj_methods.__ori_Test3,
			__ctor = raw_obj_methods.__ctor,
		};
		raw_obj_methods = nil;

		local obj_build = function()
			return {
				__ctor_called = false,
			};
		end;

		local __defineclass_return = defineclass(nil, "ZipInputStream", "ZipInputStream", class, obj_methods, obj_build, false);
		Utility.Warn("ZipInputStream::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__method_info = {
		ctor = {
			ctor = true,
		},
		Test = {
			private = true,
		},
		Test2 = {
			private = true,
		},
		Test3 = {
			private = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "zipoutputstream";
require "intlist";
require "testextension";
settempmetatable(ZipInputStream);
