require "cs2lua__namespaces"; 

DataBlockDefine.Int64StringMap = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(DataBlockDefine.Int64StringMap, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		DataBlockDefine.Int64StringMap.__cctor();
	end,

	__cctor = function()
		if DataBlockDefine.Int64StringMap.__cctor_called then 
			return;
		else
			DataBlockDefine.Int64StringMap.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	GetDataBlockId = function(this)
		local __method_ret_1538_8_1541_9;
		__method_ret_1538_8_1541_9 = this.m_DataBlockId;
		return __method_ret_1538_8_1541_9;
	end,

	Init = function(this)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = DataBlockDefine.DclApi.alloc_container(8);
		this.m_DataWrap:Clear();
		this.m_IsValid = true;
	end,

	Release = function(this)
		if (not this.m_IsValid) then 
			return;
		end;
		DataBlockDefine.Int64StringMap.Clear(this);
		DataBlockDefine.DclApi.free_container(this.m_DataBlockId);
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	Attach = function(this, dataBlockId)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = dataBlockId;
		if (dataBlockId ~= 0) then 
			DataBlockDefine.DclApi.iterate_int64_uint64_map(dataBlockId, function(k, v)
				local __method_ret_1565_61_1570_17;
				local elem;
				elem = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
				DataBlockDefine.CString.Attach(elem, v);
				this.m_DataWrap:Add(k, elem);
				__method_ret_1565_61_1570_17 = true;
				return __method_ret_1565_61_1570_17;
			end);
		end;
		this.m_IsValid = true;
	end,

	Detach = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.Int64StringMap.__ori_Detach, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Detach = function(this, __cs2lua_func_info)
		if (not this.m_IsValid) then 
			return;
		end;
		local __foreach_1578_12_1582_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_1578_12_1582_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			local elem;
			elem = pair.Value;
			if (not isequal(nil, elem)) then 
				DataBlockDefine.CString.Detach(elem);
			end;
		end;
		recycleiterator(__cs2lua_func_info, __foreach_1578_12_1582_13);
		this.m_DataWrap:Clear();
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	GetCount = function(this)
		local __method_ret_1588_8_1591_9;
		__method_ret_1588_8_1591_9 = this.m_DataWrap.Count;
		return __method_ret_1588_8_1591_9;
	end,

	GetData = function(this, key)
		local __method_ret_1592_8_1597_9;
		local ret;
		local __invoke_1595_12_1595_48;
		__invoke_1595_12_1595_48,ret = this.m_DataWrap:TryGetValue(key, __cs2lua_out);
		__method_ret_1592_8_1597_9 = ret;
		return __method_ret_1592_8_1597_9;
	end,

	SetData = function(this, key, val)
		local oldVal;
		--
		local __invoke_1601_16_1601_55;
		__invoke_1601_16_1601_55,oldVal = this.m_DataWrap:TryGetValue(key, __cs2lua_out);
		if __invoke_1601_16_1601_55 then

			DataBlockDefine.CString.Release(oldVal);
		end;
		this.m_DataWrap[key] = val;
		DataBlockDefine.DclApi.int64_uint64_map_set_element(this.m_DataBlockId, key, DataBlockDefine.Int64StringMap.condexp_1605_68_1605_106(this, val));
	end,
	condexp_1605_68_1605_106 = function(this, val)
		local retval_1605_68_1605_106 = nil;
		if isequal(nil, val) then retval_1605_68_1605_106 = 0 else retval_1605_68_1605_106 = DataBlockDefine.CString.GetDataBlockId(val) end;
		return retval_1605_68_1605_106;
	end,

	Add = function(this, key, val)
		this.m_DataWrap:Add(key, val);
		DataBlockDefine.DclApi.int64_uint64_map_add_element(this.m_DataBlockId, key, DataBlockDefine.Int64StringMap.condexp_1610_68_1610_106(this, val));
	end,
	condexp_1610_68_1610_106 = function(this, val)
		local retval_1610_68_1610_106 = nil;
		if isequal(nil, val) then retval_1610_68_1610_106 = 0 else retval_1610_68_1610_106 = DataBlockDefine.CString.GetDataBlockId(val) end;
		return retval_1610_68_1610_106;
	end,

	Remove = function(this, key)
		local oldVal;
		--
		local __invoke_1615_16_1615_55;
		__invoke_1615_16_1615_55,oldVal = this.m_DataWrap:TryGetValue(key, __cs2lua_out);
		if __invoke_1615_16_1615_55 then

			DataBlockDefine.CString.Release(oldVal);
		end;
		this.m_DataWrap:Remove(key);
		DataBlockDefine.DclApi.int64_uint64_map_remove_element(this.m_DataBlockId, key);
	end,

	Contains = function(this, key)
		local __method_ret_1621_8_1624_9;
		__method_ret_1621_8_1624_9 = this.m_DataWrap:ContainsKey(key);
		return __method_ret_1621_8_1624_9;
	end,

	Clear = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.Int64StringMap.__ori_Clear, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Clear = function(this, __cs2lua_func_info)
		local __foreach_1627_12_1631_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_1627_12_1631_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			local elem;
			elem = pair.Value;
			if (not isequal(nil, elem)) then 
				DataBlockDefine.CString.Release(elem);
			end;
		end;
		recycleiterator(__cs2lua_func_info, __foreach_1627_12_1631_13);
		this.m_DataWrap:Clear();
		DataBlockDefine.DclApi.container_clear(this.m_DataBlockId);
	end,

	Iterate = function(this, callback)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.Int64StringMap.__ori_Iterate, this, __cs2lua_func_info, callback);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Iterate = function(this, __cs2lua_func_info, callback)
		local __foreach_1637_12_1640_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_1637_12_1640_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			if (not callback(pair.Key, pair.Value)) then 
				do
					break;
				end;
			end;
		end;
		recycleiterator(__cs2lua_func_info, __foreach_1637_12_1640_13);
	end,

	ctor = function(this)
		DataBlockDefine.Int64StringMap.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
		this.m_DataWrap = newexterndictionary(System.Collections.Generic.Dictionary_TKey_TValue, buildglobalinfoonce("g_System_Collections_Generic_Dictionary_System_Int64_DataBlockDefine_CString_TypeArgs", getglobalinfo("g_System_Collections_Generic_Dictionary_System_Int64_DataBlockDefine_CString_TypeArgs") or {System.Int64, DataBlockDefine.CString}), buildglobalinfoonce("g_System_Collections_Generic_Dictionary_System_Int64_DataBlockDefine_CString_TypeKinds", getglobalinfo("g_System_Collections_Generic_Dictionary_System_Int64_DataBlockDefine_CString_TypeKinds") or {TypeKind.Struct, TypeKind.Class}), "ctor", 0, {});
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_IsValid", false);
		rawset(this, "m_DataBlockId", 0);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("DataBlockDefine.Int64StringMap::__define_class begin");

		local class = DataBlockDefine.Int64StringMap;
		local obj_methods = {
			GetDataBlockId = rawget(class, "GetDataBlockId"),
			Init = rawget(class, "Init"),
			Release = rawget(class, "Release"),
			Attach = rawget(class, "Attach"),
			Detach = rawget(class, "Detach"),
			GetCount = rawget(class, "GetCount"),
			GetData = rawget(class, "GetData"),
			SetData = rawget(class, "SetData"),
			Add = rawget(class, "Add"),
			Remove = rawget(class, "Remove"),
			Contains = rawget(class, "Contains"),
			Clear = rawget(class, "Clear"),
			Iterate = rawget(class, "Iterate"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "DataBlockDefine.Int64StringMap", "Int64StringMap", class, obj_methods, false, false);
		Utility.Warn("DataBlockDefine.Int64StringMap::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		m_IsValid = true,
		m_DataBlockId = true,
		m_DataWrap = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"DataBlockDefine.IDataBlock",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "datablockdefine__cstring";
settempmetatable(DataBlockDefine.Int64StringMap);
