require "cs2lua__namespaces"; 

DataBlockDefine.StringInt64Map = {
	-------------------------------
	-------- class methods --------
	-------------------------------
	__new_object = function(...)
		local __cs2dsl_newobj;
		__cs2dsl_newobj = newobject(DataBlockDefine.StringInt64Map, nil, nil, "ctor", 0, nil, ...);
		return __cs2dsl_newobj;
	end,

	cctor = function()
		DataBlockDefine.StringInt64Map.__cctor();
	end,

	__cctor = function()
		if DataBlockDefine.StringInt64Map.__cctor_called then 
			return;
		else
			DataBlockDefine.StringInt64Map.__cctor_called = true;
		end;
	end,

	-------------------------------
	-------- class fields --------
	-------------------------------
	__cctor_called = false,

	-------------------------------
	------ instance methods -------
	-------------------------------
	GetDataBlockId = function(this)
		local __method_ret_1757_8_1760_9;
		__method_ret_1757_8_1760_9 = this.m_DataBlockId;
		return __method_ret_1757_8_1760_9;
	end,

	Init = function(this)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = DclApi.alloc_container(4);
		this.m_DataWrap:Clear();
		this.m_IsValid = true;
	end,

	Release = function(this)
		if (not this.m_IsValid) then 
			return;
		end;
		DataBlockDefine.StringInt64Map.Clear(this);
		DclApi.free_container(this.m_DataBlockId);
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	Attach = function(this, dataBlockId)
		if this.m_IsValid then 
			return;
		end;
		this.m_DataBlockId = dataBlockId;
		if (dataBlockId ~= 0) then 
			DclApi.iterate_string_int64_map(dataBlockId, function(k, v)
				local __method_ret_1784_61_1789_17;
				local key;
				key = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
				DataBlockDefine.CString.Attach(key, k);
				this.m_DataWrap:Add(k, key);
				__method_ret_1784_61_1789_17 = true;
				return __method_ret_1784_61_1789_17;
			end);
		end;
		this.m_IsValid = true;
	end,

	Detach = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringInt64Map.__ori_Detach, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Detach = function(this, __cs2lua_func_info)
		if (not this.m_IsValid) then 
			return;
		end;
		local __foreach_1797_12_1800_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_1797_12_1800_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			local key;
			key = pair.Value;
			DataBlockDefine.CString.Detach(key);
		end;
		recycleiterator(__cs2lua_func_info, __foreach_1797_12_1800_13);
		this.m_DataWrap:Clear();
		this.m_DataBlockId = 0;
		this.m_IsValid = false;
	end,

	GetCount = function(this)
		local __method_ret_1806_8_1809_9;
		__method_ret_1806_8_1809_9 = this.m_DataWrap.Count;
		return __method_ret_1806_8_1809_9;
	end,

	GetData = function(this, key)
		local __method_ret_1810_8_1813_9;
		__method_ret_1810_8_1813_9 = DclApi.string_int64_map_get_element(this.m_DataBlockId, DataBlockDefine.StringInt64Map.condexp_1812_70_1812_108(this, key));
		return __method_ret_1810_8_1813_9;
	end,
	condexp_1812_70_1812_108 = function(this, key)
		local retval_1812_70_1812_108 = nil;
		if isequal(nil, key) then retval_1812_70_1812_108 = 0 else retval_1812_70_1812_108 = DataBlockDefine.CString.GetDataBlockId(key) end;
		return retval_1812_70_1812_108;
	end,

	SetData = function(this, key, val)
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			local oldKey;
			oldKey = DclApi.string_int64_map_get_key(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
			local mapKey;
			mapKey = DclApi.string_int64_map_set_element(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key), val);
			if (oldKey ~= mapKey) then 
				local oldKeyObj;
				--
				local __invoke_1821_24_1821_69;
				__invoke_1821_24_1821_69,oldKeyObj = this.m_DataWrap:TryGetValue(oldKey, __cs2lua_out);
				if __invoke_1821_24_1821_69 then

					DataBlockDefine.CString.Release(oldKeyObj);
				end;
			end;
			if (mapKey ~= DataBlockDefine.CString.GetDataBlockId(key)) then 
				local newKey;
				newKey = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
				DataBlockDefine.CString.Attach(newKey, mapKey);
				this.m_DataWrap[mapKey] = newKey;
			else
				this.m_DataWrap[mapKey] = key;
			end;
		end;
	end,

	Add = function(this, key, val)
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			local mapKey;
			mapKey = DclApi.string_int64_map_add_element(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key), val);
			local newKey;
			newKey = newobject(DataBlockDefine.CString, nil, nil, "ctor", 0, nil);
			DataBlockDefine.CString.Attach(newKey, mapKey);
			this.m_DataWrap:Add(mapKey, newKey);
		end;
	end,

	Remove = function(this, key)
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			local mapKey;
			mapKey = DclApi.string_int64_map_get_key(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
			local keyObj;
			--
			local __invoke_1849_20_1849_62;
			__invoke_1849_20_1849_62,keyObj = this.m_DataWrap:TryGetValue(mapKey, __cs2lua_out);
			if __invoke_1849_20_1849_62 then

				DataBlockDefine.CString.Release(keyObj);
			end;
			DclApi.string_int64_map_remove_element(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
		end;
	end,

	Contains = function(this, key)
		local __method_ret_1855_8_1861_9;
		if ((not isequal(nil, key)) and (DataBlockDefine.CString.GetDataBlockId(key) ~= 0)) then 
			__method_ret_1855_8_1861_9 = DclApi.string_int64_map_contains(this.m_DataBlockId, DataBlockDefine.CString.GetDataBlockId(key));
			return __method_ret_1855_8_1861_9;
		end;
		__method_ret_1855_8_1861_9 = false;
		return __method_ret_1855_8_1861_9;
	end,

	Clear = function(this)
		local __cs2lua_func_info = luainitialize();
		luapcall(DataBlockDefine.StringInt64Map.__ori_Clear, this, __cs2lua_func_info);
		__cs2lua_func_info = luafinalize(__cs2lua_func_info);
	end,
	__ori_Clear = function(this, __cs2lua_func_info)
		local __foreach_1864_12_1867_13 = newiterator(__cs2lua_func_info, this.m_DataWrap, System.Collections.Generic.Dictionary_TKey_TValue, System.Collections.Generic.Dictionary_TKey_TValue, true);
		for pair in getiterator(__foreach_1864_12_1867_13) do
			if pair == __cs2lua_nil then
				pair = nil;
			end;
			local key;
			key = pair.Value;
			DataBlockDefine.CString.Release(key);
		end;
		recycleiterator(__cs2lua_func_info, __foreach_1864_12_1867_13);
		this.m_DataWrap:Clear();
		DclApi.container_clear(this.m_DataBlockId);
	end,

	Iterate = function(this, callback)
		DclApi.iterate_string_int64_map(this.m_DataBlockId, function(k, v)
			local __method_ret_1873_59_1879_13;
			local kObj;
			--
			local __invoke_1875_20_1875_55;
			__invoke_1875_20_1875_55,kObj = this.m_DataWrap:TryGetValue(k, __cs2lua_out);
			if __invoke_1875_20_1875_55 then

				__method_ret_1873_59_1879_13 = callback(kObj, v);
				return __method_ret_1873_59_1879_13;
			else
				__method_ret_1873_59_1879_13 = false;
				return __method_ret_1873_59_1879_13;
			end;
			return nil;
		end);
	end,

	ctor = function(this)
		DataBlockDefine.StringInt64Map.__ctor(this);
	end,

	__ctor = function(this)
		if this.__ctor_called then 
			return;
		else
			this.__ctor_called = true;
		end;
		this.m_DataWrap = newexterndictionary(System.Collections.Generic.Dictionary_TKey_TValue, buildglobalinfoonce("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_CString_TypeArgs", getglobalinfo("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_CString_TypeArgs") or {System.UInt64, DataBlockDefine.CString}), buildglobalinfoonce("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_CString_TypeKinds", getglobalinfo("g_System_Collections_Generic_Dictionary_System_UInt64_DataBlockDefine_CString_TypeKinds") or {TypeKind.Struct, TypeKind.Class}), "ctor", 0, {});
	end,
	-------------------------------
	------ instance fields -------
	-------------------------------
	__init_obj_fields = function(this)
		rawset(this, "m_IsValid", false);
		rawset(this, "m_DataBlockId", 0);
		rawset(this, "__ctor_called", false);
	end,

	-------------------------------
	--- define class and object ---
	-------------------------------
	__define_class = function()
		Utility.Warn("DataBlockDefine.StringInt64Map::__define_class begin");

		local class = DataBlockDefine.StringInt64Map;
		local obj_methods = {
			GetDataBlockId = rawget(class, "GetDataBlockId"),
			Init = rawget(class, "Init"),
			Release = rawget(class, "Release"),
			Attach = rawget(class, "Attach"),
			Detach = rawget(class, "Detach"),
			GetCount = rawget(class, "GetCount"),
			GetData = rawget(class, "GetData"),
			SetData = rawget(class, "SetData"),
			Add = rawget(class, "Add"),
			Remove = rawget(class, "Remove"),
			Contains = rawget(class, "Contains"),
			Clear = rawget(class, "Clear"),
			Iterate = rawget(class, "Iterate"),
			ctor = rawget(class, "ctor"),
			__ctor = rawget(class, "__ctor"),
		};
		local tmp_obj_method = nil;

		local __defineclass_return = defineclass(nil, "DataBlockDefine.StringInt64Map", "StringInt64Map", class, obj_methods, false, false);
		Utility.Warn("DataBlockDefine.StringInt64Map::__define_class end");
		return __defineclass_return;
	end,

	-------------------------------
	--------- fields info ---------
	-------------------------------
	__class_fields = {
		__cctor_called = true,
	},

	__obj_fields = {
		m_IsValid = true,
		m_DataBlockId = true,
		m_DataWrap = true,
		__ctor_called = true,
	},

	-------------------------------
	-------- metadata info --------
	-------------------------------
	__interfaces = {
		"DataBlockDefine.IDataBlock",
	},
	__method_info = {
		ctor = {
			ctor = true,
		},
	},
};


require "cs2lua__syslib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "datablockdefine__cstring";
settempmetatable(DataBlockDefine.StringInt64Map);
